#ifndef COR_FLAT_G4_INTERFACE_h
#define COR_FLAT_G4_INTERFACE_h 1

#include "G4VPrimaryGenerator.hh"

#include "TTree.h"
#include "TFile.h"

#include <vector>
#include <tuple>

typedef std::tuple< std::vector<int>*, std::vector<double>*, std::vector<double>*, std::vector<double>*, std::vector<double>*, std::vector<double>*, std::vector<double>*, std::vector<double>*, std::vector<double>*> EVT;
/// A base class for primary generation via HepMC object.
/// This class is derived from G4VPrimaryGenerator.

class CorFlatG4Interface : public G4VPrimaryGenerator {
protected:
  // Note that the life of HepMC event object must be handled by users.
  // In the default implementation, a current HepMC event will be
  // deleted at GeneratePrimaryVertex() in the next event.
  EVT* fEvt; // (care for single event case only)

  // We have to take care for the position of primaries because
  // primary vertices outside the world voulme give rise to G4Execption.
  // If the default implementation is not adequate, an alternative
  // can be implemented in your own class.
  virtual G4bool CheckVertexInsideWorld(const G4ThreeVector& pos) const;

  // service method for conversion from HepMC::GenEvent to G4Event
  void FlatCorsika2G4(const EVT* CorsikaShower, G4Event* g4event);

  // Implement this method in his/her own concrete class.
  // An empty event will be created in default.
  virtual EVT* GenerateCorsikaEvent();

public:
  CorFlatG4Interface();
  virtual ~CorFlatG4Interface();

  EVT* GetCorsikaGenEvent() const;

  // The default behavior is that a single HepMC event generated by
  // GenerateHepMCEvent() will be converted to G4Event through HepMC2G4().
  virtual void GeneratePrimaryVertex(G4Event* anEvent);
};

inline EVT* CorFlatG4Interface::GetCorsikaGenEvent() const { return fEvt; }

#endif
